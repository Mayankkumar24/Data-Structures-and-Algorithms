----------------BRUTE FORCE APPROACH--------------------
TIME COMP------> O(N^2);
SPACE COMP-----> O(1);

class Solution {
  public:
    int cntSubarrays(vector<int> &arr, int k) {
        // code here
        int n = arr.size();
        int ans = 0;
        for (int i=0; i<n; i++){
            int curr_sum = 0;
            for (int j=i; j<n; j++){
                curr_sum += arr[j];
                if (curr_sum == k) ans++;
            }
        }
        return ans;
    }
};




-------------------OPTIMAL APPROACH----------------------
TIME COMP------> O(N * LOG(K));
SPACE COMP-----> O(N);


//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int countSubarrays(vector<int> &arr, int k) {
        // code here
        int n = arr.size();
        unordered_map<int,int>mp;
        int sum = 0, ans = 0;
        
        for (int i=0; i<n; i++){
            sum += arr[i];
            if (sum == k) ans++;
            if (mp.find(sum-k) != mp.end()){
                ans += mp[sum-k];
            }
            mp[sum]++;
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    cin.ignore();
    while (t--) {

        string ks;
        getline(cin, ks);
        int k = stoi(ks);
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        Solution obj;
        cout << obj.countSubarrays(arr, k);
        cout << endl;
        cout << "~"
             << "\n";
    }

    return 0;
}

// } Driver Code Ends
