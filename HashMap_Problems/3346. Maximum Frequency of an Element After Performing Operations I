------------ VERY IMPORTANT CONCEPT -----------



class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        unordered_map<int,int>range;
        unordered_map<int,int>freq;
        int minRange = 1e9;
        int maxRange = -1e9;

        for (int i=0; i<nums.size(); i++){
            freq[nums[i]]++;
            int left = nums[i] - k, right = nums[i] + k;
            minRange = min(minRange,left);
            maxRange = max(maxRange,right); range[left]++; range[right+1]--;
        }
        int ans = 1;

        for (int i=minRange; i<=maxRange; i++){
            range[i]+=range[i-1];
            int currElefreq = freq[i];
            int maxFreq = range[i] - currElefreq;
            maxFreq = min(maxFreq,numOperations); maxFreq += currElefreq;
            ans = max(ans,maxFreq);
        }
        return ans;
    }
};

-----------MOST OPTIMAL SOLUTION--------

class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {

        sort(nums.begin(),nums.end());
        map<int,int>range;
        map<int,int>fre;
        int minRange = 2e9;
        int maxRange = -2e9;
        for(int i=0;i<nums.size();i++)
        {
            fre[nums[i]]++;
            int left = nums[i]-k;
            int right = nums[i]+k;
            minRange = min(minRange, left);
            maxRange = max(maxRange,right);
            range[left]++;
            range[right+1]--;
            range[nums[i]]+=0;
        }
        
        int ans = 1;

        int prevousRangeSum = 0;
        
        for(auto it=range.begin();it!=range.end();it++)
        {   
             
             it->second += prevousRangeSum;
             prevousRangeSum = it->second;
             int currentElementFrequency = fre[it->first];
             int maxFrequency = it->second - currentElementFrequency;
             maxFrequency = min(maxFrequency,numOperations);
             maxFrequency += currentElementFrequency;
             ans = max(ans,maxFrequency);
        }
        return ans;

    }
};
