class Solution {
public:
    int minSubarray(vector<int>& nums, int p) {
        
        int n = nums.size();
        int sum = 0;

        for (auto &x : nums){
            sum += x;
            sum %= p;
        }
        int target = sum%p;
        if (target == 0) return 0;
        //if (target < p) return -1;

        int j = 0,  curr = 0;

        unordered_map<int,int>mp; mp[0] = -1;

        int ans = n;

        for (int i=0; i<n; i++){
            curr += nums[i];
            curr %= p;
            int need = (curr-target + p) % p;
            if (mp.count(need) > 0){
                ans = min(ans,i-mp[need]);
            }
            mp[curr] = i;
        }
        if (ans == n) return -1;
        else return ans;
    }
};
