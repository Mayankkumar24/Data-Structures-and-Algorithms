-------------BRUTE FORCE APPROACH------------------

class Solution {
public:
    int minimumOperations(vector<int>& nums) {
        int cnt = 0, temp = 0;
        while(true){
            unordered_map<int,int>mp;
            temp = 0;
            for (int &num : nums){
                if (++mp[num] == 2) temp++;
            }
            if (temp == 0) break;
            nums.erase(nums.begin(),nums.begin()+min(3,(int)nums.size()));
            cnt++;
        }
        return cnt;
    }
};

------------------OPTIMAL APPROACH--------------------
TIME COMP-----> O(N);
SPACE COMP----> O(N);

class Solution {
public:
    int minimumOperations(vector<int>& nums) {
        unordered_map<int,int>mp;
        int n = nums.size();
        for (int i=n-1; i>=0; i--){
            if (++mp[nums[i]] > 1){
                return (i+3)/3;
            }
        }
        return 0;
    }
};
