---------------------------BRUTE FORCE APPROCH------------------------------
TIME COMP-----> O(N^2);
SPACE COMP----> O(1);

class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        // Code here
        int n = arr.size();
        int max_length = 0;
        
        for (int i=0; i<n; i++){
            int Greater = 0;
            int SmallerEqual = 0;
            for (int j=i; j<n;j++){
                if (arr[j]>k) Greater++;
                else SmallerEqual++;
                if (Greater > SmallerEqual){
                    max_length = max(max_length,j-i+1);
                }
            }
        }
        return max_length;
    }
};


----------------------------OPTIMAL APPROCH----------------------------------
TIME COMP-----> O(N*LOG(N));
SPACE COMP----> O(N);

class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        // Code here
        int n = arr.size();
        int maxLength = 0;
        int cnt = 0;
        unordered_map<int,int>mp;
        mp[0] = -1;
        
        for (int i=0; i<n; i++){
            if (arr[i] > k) cnt++;
            else cnt--;
            if (cnt > 0){
                maxLength = i+1;
            }
            else if (mp.find(cnt-1) != mp.end()){
                maxLength = max(maxLength,i-mp[cnt-1]);
            }else if (mp.find(cnt) == mp.end()){
                mp[cnt] = i;
            }
        }
        return maxLength;
    }
};
