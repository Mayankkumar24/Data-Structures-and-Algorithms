class Solution {
public:
    vector<vector<int>>res;
    vector<int>quad;
    void solve(int k, int start, long target, vector<int>&nums){
        if (k != 2){
            for (int i=start; i<nums.size()-k+1; i++){
                if (i > start && nums[i] == nums[i-1]){
                    continue;
                }
                quad.push_back(nums[i]);
                solve(k-1,i+1,target-(long) nums[i],nums);
                quad.pop_back();
            }
            return;
        }
        int l = start, r = nums.size()-1;
        while(l<r){
            long s = nums[l] + nums[r];
            if (s > (long) target){
                r -= 1;
            }
            else if (s < (long) target){
                l++;
            }else{
                res.push_back(quad);
                res.back().push_back(nums[l]);
                res.back().push_back(nums[r]);
                l++;
                while(l < r && nums[l] == nums[l-1]){
                    l++;
                }
            }
        }
    }
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        quad.clear();
        res.clear();
        if (nums.size() < 4) return res;
        solve(4,0,(long) target,nums);
        return res;
    }
};
