------------- APPROACH 01-----------------
TIME COMP----> O(N);
SPACE COMP---> O(N)

class Solution {
  public:
    int subarraySum(vector<int>& arr) {
        // code here
        int n = arr.size();
        vector<int>PreSum(n,0);
        PreSum[0] = arr[0];
        for (int i=1; i<n; i++) PreSum[i] += (PreSum[i-1] + arr[i]);
        int ans = 0;
        for (int i=0; i<n; i++){
            ans += (i+1) * (PreSum[i]);
            ans -= (n-i-1) * (PreSum[i]);
        }
        return ans;
    }
};

------------APPROACH 02----------------
TIME COMP----> O(N);
SPACE COMP---> O(1);

class Solution {
  public:
    int subarraySum(vector<int>& arr) {
        // code here
        int n = arr.size();
        int ans = 0;
        for (int i=0; i<n; i++){
            ans += (i+1) * (n-i) * (arr[i]);
        }
        return ans;
    }
};
