TIME COMP-----> O(N);
SPACE COMP----> O(N);


class Solution {
public:
    string pushDominoes(string dominoes) {
        int n = dominoes.size();
        vector<int>PushFromLeft(n,0),PushFromRight(n,0);
        if (dominoes[0] == 'R') PushFromLeft[0] = 0;
        else PushFromLeft[0] = -1;
        for (int i=1; i<n; i++){
            if (dominoes[i] == 'R') PushFromLeft[i] = i;
            else if (dominoes[i] == '.') PushFromLeft[i] = PushFromLeft[i-1];
            else PushFromLeft[i] = -1;
        }
        if (dominoes[n-1] == 'L') PushFromRight[n-1] = n-1;
        else PushFromRight[n-1] = -1;
        for (int i=n-2; i>=0; i--){
            if (dominoes[i] == 'L') PushFromRight[i]  = i;
            else if (dominoes[i] == '.') PushFromRight[i] = PushFromRight[i+1];
            else PushFromRight[i] = -1;
        }
        string ans =  "";
        for (int i=0; i<n; i++){
            int DistFromLeftPush = abs(i - PushFromRight[i]);
            int DistFromRightPush = abs(i - PushFromLeft[i]);
            if (PushFromLeft[i] == PushFromRight[i]){
                ans += dominoes[i];
            }
            else if (PushFromRight[i] == -1){
                ans += 'R';
            }else if (PushFromLeft[i] == -1){
                ans += 'L';
            }else if (DistFromLeftPush == DistFromRightPush) ans += '.';
            else{
                ans += (DistFromLeftPush < DistFromRightPush ? 'L' : 'R');
            }
        }
        return ans;
    }
};
