class Solution {
public:
    int Solve(string A, string B){
        int n = A.size(), m = B.size();
        int len = min(n,m);
        int cnt = 0;
        while(cnt < len && A[cnt] == B[cnt]){
            cnt++;
        }
        return cnt;
    }
    vector<int> longestCommonPrefix(vector<string>& words) {
        int n = words.size();
        vector<int>ans(n,0);
        if (n <= 1) return ans;
        vector<int>LCP(n-1,0);
        for (int i=0; i+1<n; i++){
            LCP[i] = Solve(words[i],words[i+1]);
        }
        vector<int>PrefMax(n-1),SufMax(n-1);
        PrefMax[0] = LCP[0];
        for (int i=1; i<n-1; i++){
            PrefMax[i] = max(PrefMax[i-1],LCP[i]);
        }
        SufMax[n-2] = LCP[n-2];
        for (int i=n-3; i>=0; i--){
            SufMax[i] = max(SufMax[i+1],LCP[i]);
        }
        for (int i=0; i<n; i++){
            int best = 0;
            if (i >= 2) best = max(best,PrefMax[i-2]);
            if (i+1 <= n-2) best = max(best,SufMax[i+1]);
            if (i>0 && i<n-1) best = max(best,Solve(words[i-1],words[i+1]));
            ans[i] = best;
        }
        return ans;
    }
};
