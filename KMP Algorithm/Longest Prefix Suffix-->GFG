---------------------------BRUTE FORCE APPROACH---------------------------
TIME COMP----> O(N^2);
SPACE COMP---> O(N);

class Solution {
  public:
    bool isSuffix(string &s, string &Prefix){
        int n = s.size();
        int j = n-1;
        
        int m = Prefix.size();
        int i = m-1;
        while(j>=0 && i>=0 && Prefix[i] == s[j]){
            i--; j--;
        }
        return i<0;
    }
    int getLPSLength(string &s) {
        // code here
        int n = s.size();
        string Prefix = "";
        int length = 0;
        for (int i=0; i<n-1; i++){
            Prefix += s[i];
            if (isSuffix(s,Prefix)){
                int m = Prefix.size();
                length = max(length,m);
            }
        }
        return length;
    }
};


-------------------------OPTIMAL APPROACH--------------------------------
TIME COMP------> O(N);
SPACE COMP-----> O(N);

class Solution {
  public:
    int getLPSLength(string &s) {
        // code here
        int n = s.size();
        vector<int>kmp(n+1,0);
        int i = 0, j = -1;
        kmp[0] = -1;
        while(i<n){
            while(j != -1 && s[j] != s[i]){
                j = kmp[j];
            }
            j++; i++;
            kmp[i] = j;
        }
        return kmp[n];
    }
};
