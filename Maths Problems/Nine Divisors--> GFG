Given a positive integer n, you need to count the numbers less than or equal to n having exactly 9 divisors.


class Solution {
  public:
    typedef long long ll;
    int countNumbers(int n) {
        // Code Here
        if (n < 36) return 0;
        int limit = sqrt(n)+1;
        vector<bool>isPrime(limit,true);
        isPrime[0] = isPrime[1] = false;
        
        for (int i=2; i*i < limit; i++){
            if (isPrime[i]){
                for (int j=i*i; j<limit; j+=i){
                    isPrime[j] =false;
                }
            }
        }
        vector<int>Primes;
        for (int i=2; i<limit; i++){
            if (isPrime[i]){
                Primes.push_back(i);
            }
        }
        int cnt = 0;
        for (int p : Primes){
            ll p8 = 1;
            for (int i=0; i<8; i++){
                p8 *= p;
                if (p8 > n) break;
            }
            if (p8 <= n) cnt++;
        }
        for (int i=0; i<Primes.size(); i++){
            ll p2 = ll (Primes[i] * Primes[i]);
            if (p2 > n) break;
            for (int j=i+1; j<Primes.size(); j++){
                ll q2 = ll (Primes[j] * Primes[j]);
                if (p2 * q2 > n) break;
                cnt++;
            }
        }
        return cnt;
    }
};
