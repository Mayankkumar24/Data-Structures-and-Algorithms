------------APPROACH 01-------------
TIME COMP---> O(N^3);
SPACE COMP--> A.SPACE O(N)

class Solution {
public:
    typedef long long ll;
    ll Solve(int n,int limit, int child){
        if (child == 3){
            if (n == 0) return 1;
            return 0;
        }
        ll ways = 0;
        for (int i=0; i<=min(n,limit); i++){
            ways += Solve(n-i,limit,child+1);
        }
        return ways;
    }
    long long distributeCandies(int n, int limit) {
        int child = 0;
        return Solve(n,limit,child);
    }
};

------------APPROCH 02------------------
TIME COMP---> O(N^3);
SPACE COMP--> O(1);

class Solution {
public:
    typedef long long ll;
    long long distributeCandies(int n, int limit) {
        ll ways = 0;
        for (int ch1=0; ch1<=min(n,limit); ch1++){
            for (int ch2=0; ch2<=min(n-ch1,limit); ch2++){
                for (int ch3=0; ch3<=min(n-ch1-ch2,limit); ch3++){
                    if (ch1+ch2+ch3 == n) ways++;
                }
            }
        }
        return ways;
    }
};

-------------APPROACH 03---------------
TIME COMP----> O(N^2);
SPACE COMP---> O(1);

class Solution {
public:
    typedef long long ll;
    long long distributeCandies(int n, int limit) {
        ll ways = 0;
        for (int ch1=0; ch1<=min(n,limit); ch1++){
            for (int ch2=0; ch2<=min(n-ch1,limit); ch2++){
                int ch3 = min(limit,n-ch1-ch2);
                if (ch1+ch2+ch3 == n) ways++;
            }
        }
        return ways;
    }
};


---------APPROACH 04-------------
TIME COMP----> O(1);
SPACE COMP---> O(1);

class Solution {
public:
    long long H3(long long n){
        return n<0?0:(n+1)*(n+2)/2;
    }
    long long distributeCandies(int n, int limit) {
        return H3(n)-3LL*H3(n-limit-1)+3LL*H3(n-2*(limit+1))-H3(n-3*(limit+1));
    }
};
