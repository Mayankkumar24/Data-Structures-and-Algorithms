--------------BRUTE FORCE APPROACH------------------
TIME COMP----> O(N*N);
SPACE COMP---> O(1);

class Solution {
  public:
    int maxCircularSum(vector<int> &arr) {
        // code here
        int n = arr.size();
        int ans = *max_element(arr.begin(),arr.end());
        for (int i=0; i<n; i++){
            int j = (i+1)%n;
            int curr_sum = arr[i];
            while(j != i){
                curr_sum += arr[j];
                j++;
                j = j%n;
                ans = max(ans,curr_sum);
            }
        }
        return ans;
    }
};


----------------OPTIMAL APPROACH--------------------------
TIME COMP-----> O(N);
SPACE COMP----> O(1);


//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // arr: input array
    // Function to find maximum circular subarray sum.
    int circularSubarraySum(vector<int> &arr) {

        // your code here
        int n = arr.size();
        int maxSum = INT_MIN, minSum = INT_MAX, totalSum = 0;
        int s1 = 0,s2 = 0;
        
        for (int i=0; i<n; i++){
            totalSum += arr[i];
            s1 += arr[i]; s2 += arr[i];
            if (s1 < 0) s1 = 0;
            if (s2 > 0) s2 = 0;
            maxSum = max(maxSum,s1);
            minSum = min(minSum,s2);
        }
        return max(maxSum,totalSum-minSum);
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;

        // Read first array
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        Solution ob;
        int res = ob.circularSubarraySum(arr);

        cout << res << endl;
    }
    return 0;
}

// } Driver Code Ends
