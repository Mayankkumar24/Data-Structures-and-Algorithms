-----------------BRUTE FORCE APPROACH----------------
TIME COMP-----> O(10^9 * 9);
SPACE COMP----> O(1);

class Solution {
  public:
    bool isPossible(int num,int &k,vector<vector<int>>&intervals){
        int cnt = 0;
        for (auto interval : intervals){
            int start = interval[0];
            int end   = interval[1];
            if (num >= start && num <= end) cnt++;
            if (cnt >= k) return true;
        }
        return false;
    }
    int powerfulInteger(vector<vector<int>>& intervals, int k) {
        // code here
        int n = intervals.size();
        int PowerFulInteger = -1;
        
        int start = INT_MAX;
        int end   = INT_MIN;
        for (auto interval : intervals){
            start = min(start,interval[0]);
            end   = max(end,interval[1]);
        }
        
        for (int curr_num = start ; curr_num <= end; curr_num++){
            if (isPossible(curr_num,k,intervals)){
                PowerFulInteger = curr_num;
            }
        }
        return PowerFulInteger;
    }
};


------------------OPTIMAL APPROACH-------------------
TIME COMP-----> O(N) + (N*LOG(N));
SPACE COMP----> O(N);

class Solution {
  public:
    int powerfulInteger(vector<vector<int>>& intervals, int k) {
        // code here
        map<int , int> mp;
        int n = intervals.size();
        for(int i =0; i<n; i++){
            mp[intervals[i][0]]++;
            mp[intervals[i][1]+1]--;
        }
        int count = 0, maxNum = -1;
        for(auto &it: mp){
            count += it.second;
            if(count >=k ){
                if(it.second < 0){
                    maxNum = it.first-1;
                }else{
                    maxNum = it.first;
                }
            }else if(count >= k+it.second && it.second < 0){
                maxNum = it.first-1;
            }
        }
        return maxNum;
    }
};
