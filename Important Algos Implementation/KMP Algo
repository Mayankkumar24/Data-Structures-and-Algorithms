
------------ BRUTE FORCE -----------------

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    vector<int> search(string& pat, string& txt) {
        // code here
        vector<int>ans;
        int n = txt.size();
        int m = pat.size();
        int  j = 0;
        int i = 0;
        while(i<n){
            if (txt[i] == pat[j]){
                int k = i+1;
                j++;
                while(k<n && j<m && txt[k] == pat[j]){
                    k++; j++;
                }
                if (j>=m){
                    ans.push_back(i);
                    //j = 0;
                }
                else if (i>=n) return ans;
                j = 0;
                
            }
            i++;
        }
        return ans;
        
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string S, pat;
        cin >> S >> pat;
        Solution ob;
        vector<int> res = ob.search(pat, S);
        if (res.size() == 0)
            cout << "[]" << endl;
        else {
            for (int i : res)
                cout << i << " ";
            cout << endl;
        }
    }
    return 0;
}

// } Driver Code Ends


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

------------ KMP ALGORITHM ------------


// } Driver Code Ends
class Solution {
  public:
    void ComputeLPS(string &pat,vector<int>&LPS){
        int m = pat.size();
        int len = 0, i = 1;
        LPS[0] = 0;
        while(i<m){
            if (pat[i] == pat[len]){
                len++; LPS[i] = len; i++;
            }else{
                if (len != 0){
                    len = LPS[len-1];
                }else{
                    LPS[i] = 0; i++;
                }
            }
        }
    }
    vector<int> search(string& pat, string& txt) {
        // code here
        int n = txt.size(), m = pat.size();
        vector<int> LPS(m,0);
        ComputeLPS(pat,LPS);
        int i = 0, j = 0;
        
        vector<int>ans;
        
        while(i<n){
            if (txt[i] == pat[j]){
                i++; j++;
            }
            if (j == m){
                ans.push_back(i-j); j = LPS[j-1];
            }else  if (pat[j] != txt[i]){
                if (j > 0){
                    j = LPS[j-1];
                }else{
                    i++;
                }
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string S, pat;
        cin >> S >> pat;
        Solution ob;
        vector<int> res = ob.search(pat, S);
        if (res.size() == 0)
            cout << "[]" << endl;
        else {
            for (int i : res)
                cout << i << " ";
            cout << endl;
        }
    }
    return 0;
}

// } Driver Code Ends
