class Solution {
public:
    int minTimeToReach(vector<vector<int>>& moveTime) {
        int n = moveTime.size();
        int m = moveTime[0].size();
        vector<vector<long long>>dist(n,vector<long long>(m,1e18));
        dist[0][0] = 0;
        queue<pair<long long,pair<int,int>>>q;
        q.push({0,{0,0}});
        vector<int>row = {0,0,1,-1};
        vector<int>col = {-1,1,0,0};
        while(!q.empty()){
            long long time = q.front().first;
            int x    = q.front().second.first;
            int y    = q.front().second.second;
            q.pop();

            for (int i=0; i<4; i++){
                int nx = row[i] + x;
                int ny = col[i] + y;
                if (nx<n && nx >=0 && ny < m && ny >= 0){
                    //time += 1;
                    long long next_time = max(time+1,(long long) moveTime[nx][ny]+1);
                    if (dist[nx][ny] > next_time){
                        dist[nx][ny] = next_time;
                        q.push({dist[nx][ny],{nx,ny}});
                    }
                }
            }
        }
        return dist[n-1][m-1];
    }
};
