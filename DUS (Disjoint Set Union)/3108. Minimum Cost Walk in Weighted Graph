
class Solution {
public:
    vector<int>parent;
    int Find(int x){
        if (parent[x] == x) return x;
        return parent[x] = Find(parent[x]);
    }
    void Union(int x, int y){
        parent[y] = x;
    }
    vector<int> minimumCost(int n, vector<vector<int>>& edges, vector<vector<int>>& query) {
        parent.resize(n);
        vector<int>cost(n,-1);
        for (int i=0; i<n; i++) parent[i] = i;
        for (auto &x : edges){
            int u = x[0], v = x[1], w = x[2];
            int parent_u = Find(u);
            int parent_v = Find(v);
            if (parent_u != parent_v){
                Union(parent_u,parent_v);
                cost[parent_u] &= cost[parent_v];
            }
            cost[parent_u] &= w;
        }
        vector<int>ans;
        for (auto &x : query){
            int s = x[0], t = x[1];
            if (s == t) ans.push_back(0);
            else{
                int parent_S = Find(s);
                int parent_T = Find(t);
                if (parent_S != parent_T) ans.push_back(-1);
                else ans.push_back(cost[parent_S]);
            }
        }
        return ans;
    }
};
