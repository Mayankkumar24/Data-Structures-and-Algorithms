class Solution {
public:
    typedef long long ll;
    ll solve(string &s, int k){
        int n = s.size(); ll cnt = 0;
        unordered_set<char>st = {'a','e','i','o','u'};
        unordered_map<char,int>mp; int j = 0; int conso = 0;
        
        for (int i=0; i<n; i++){
            if (st.count(s[i]) > 0){
                mp[s[i]]++;
            }else{
                conso++;
            }
            while(mp.size()==5 && conso > k){
                if (st.count(s[j]) > 0){
                    mp[s[j]]--;
                    if (mp[s[j]] == 0){
                        mp.erase(s[j]);
                    }
                }else{
                    conso--;
                }
                j++;
            }
            cnt += (ll) (i-j+1);
        }
        return cnt;
    }
    long long countOfSubstrings(string word, int k) {
        return solve(word,k) - solve(word,k-1);
    }
};
---------------------SLIDING WINDOW METHOD---------------------

class Solution {
public:
    bool isVowel(char &ch){
        if (ch=='a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') return true;
        return false;
    }
    long long countOfSubstrings(string word, int k) {
        int n = word.size();
        long long ans = 0;
        vector<int>NextConsIdx(n);
        int LastConsIdx = n;
        for (int i=n-1; i>=0; i--){
            NextConsIdx[i] = LastConsIdx;
            if (!(isVowel(word[i]))){
                LastConsIdx = i;
            }
        }
        unordered_map<char,int>mp;
        int j = 0, consonents = 0;
        for (int i=0; i<n; i++){
            char ch = word[i];
            if (isVowel(ch)) mp[ch]++;
            else consonents++;
            while(j <= i && consonents > k){
                char ch2 = word[j];
                if(isVowel(ch2)){
                    mp[ch2]--;
                    if (mp[ch2] == 0) mp.erase(ch2);
                }else consonents--;
                j++;
            }
            while((j <= i) && (mp.size() == 5) && (consonents == k)){
                int idx = NextConsIdx[i];
                ans += (long long) (idx - i);
                char ch2 = word[j];
                if(isVowel(ch2)){
                    mp[ch2]--;
                    if (mp[ch2] == 0) mp.erase(ch2);
                }else consonents--;
                j++;
            }
        }
        return ans;
    }
};
