TIME COMP----> O(2*N);
SPACE COMP----> O(N+1);

class Solution {
public:
    int maxFreeTime(int eventTime, int k, vector<int>& startTime, vector<int>& endTime) {
        int n = startTime.size();
        vector<int>FreeTimes;
        FreeTimes.push_back(startTime[0]);
        for (int i=1; i<n; i++){
            FreeTimes.push_back(startTime[i] - endTime[i-1]);
        }
        FreeTimes.push_back(eventTime-endTime.back());
        int Max_free_time = 0, curr_free_sum = 0;

        int i = 0, j = 0;
        while(i<=n){
            curr_free_sum += FreeTimes[i];
            if (i-j+1 > k+1){
                curr_free_sum -= FreeTimes[j]; j++;
            }
            Max_free_time = max(Max_free_time,curr_free_sum);
            i++;
        }       
        return Max_free_time; 
    }
};
