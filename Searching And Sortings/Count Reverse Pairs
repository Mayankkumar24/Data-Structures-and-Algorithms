------------------BRUTE FORCE APPROACH------------------------------
TIME COMP-----> O(N^2);
SPACE COMP----> O(1);


class Solution {
  public:
    int countRevPairs(vector<int> &arr) {
        // Code here
        int n = arr.size(), ans = 0;
        
        for (int i=0; i<n; i++){
            for (int j=i+1; j<n; j++){
                if (arr[i] > 2 * arr[j]) ans++;
            }
        }
        return ans;
    }
};




-------------------OPTIMAL APPROACH---------------------------------
TIME COMP-----> O(N*LOG(N));
SPACE COMP----> O(N);

class Solution {
  public:
    void Merge(int low, int mid, int high,vector<int>&arr){
        vector<int>temp(high-low+1,0);
        int i = low, j= mid+1, k = 0;
        while(i <= mid && j <= high){
            if (arr[i] <= arr[j]){
                temp[k++] = arr[i++];
            }else{
                temp[k++] = arr[j++];
            }
        }
        while(i<=mid) temp[k++] = arr[i++];
        while(j<=high) temp[k++] = arr[j++];
        k = low;
        for (int m=0; m<temp.size(); m++){
            arr[k] = temp[m];
            k++;
        }
    }
    int MergeSortAndCount(int low, int high,vector<int>&arr){
        if (low >= high) return 0;
        int mid = (low + high)/2;
        int Count = MergeSortAndCount(low,mid,arr) + MergeSortAndCount(mid+1,high,arr);
        int j = mid+1;
        for (int i=low; i<=mid; i++){
            while(j<=high && (long long) arr[i] > (long long) 2*arr[j]){
                j++;
            }
            Count += (j-(mid+1));
        }
        Merge(low,mid,high,arr);
        return Count;
    }
    int countRevPairs(vector<int> &arr) {
        // Code here
        int n = arr.size();
        return MergeSortAndCount(0,n-1,arr);
    }
};

