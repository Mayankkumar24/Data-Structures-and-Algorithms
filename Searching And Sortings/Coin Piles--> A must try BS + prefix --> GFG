class Solution {
  public:
    int FindRightSum(vector<int>&arr,vector<int>&pre,int limit,int i){
        int n = arr.size();
        int rightsum = 0;
        int low = i, high = n-1, pos = n;
        while(low <= high){
            int mid = (low + high)/2;
            if (arr[mid] > limit){
                pos = mid; high = mid-1;
            }else low = mid+1;
        }
        rightsum = (pre[n] - pre[pos] - (n-pos) * limit);
        return rightsum;
    }
    int minimumCoins(vector<int>& arr, int k) {
        // code here
        int n = arr.size();
        sort(arr.begin(),arr.end());
        if (arr[0] == arr[n-1]) return 0;
        vector<int>pre(n+1,0);
        for (int i=1; i<=n; i++){
            pre[i] = (pre[i-1] + arr[i-1]);
        }
        int ans = INT_MAX;
        int LeftSum = 0;
        for (int i=0; i<n; i++){
            LeftSum += (i > 0 ? arr[i-1] : 0);
            int Limit = arr[i] + k;
            int RightSum = FindRightSum(arr,pre,Limit,i);
            ans = min(ans,RightSum + LeftSum);
        }
        return ans;
    }
};
