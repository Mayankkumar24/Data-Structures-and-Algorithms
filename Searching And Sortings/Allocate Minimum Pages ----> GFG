//{ Driver Code Starts
// Initial function template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    bool Can_Distribute(vector<int>&arr,int &pages, int &k){
        int n = arr.size(), total_pages = 0,students = 1;
        
        for (int i=0; i<n; i++){
            //total_pages += (arr[i]);
            if (total_pages+arr[i] <= pages){
                total_pages += arr[i];
            }else{
                students++; total_pages = arr[i];
            }
        }
        return students > k;
    }
    int findPages(vector<int> &arr, int k) {
        // code here
        int n = arr.size();
        if (n < k) return -1;
        //sort(arr.begin(),arr.end());
        int low = *max_element(arr.begin(),arr.end());
        int high = accumulate(arr.begin(),arr.end(),0);
        int ans = INT_MAX;
        while(low <= high){
            int mid = (low + high)/2;
            if (Can_Distribute(arr,mid,k)){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return low;
    }
};

//{ Driver Code Starts.

int main() {
    int test_case;
    cin >> test_case;
    cin.ignore();
    while (test_case--) {

        int d;
        vector<int> arr, brr, crr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        getline(cin, input);
        ss.clear();
        ss.str(input);
        while (ss >> number) {
            crr.push_back(number);
        }
        d = crr[0];
        int n = arr.size();
        Solution ob;
        int ans = ob.findPages(arr, d);
        cout << ans << endl;

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
