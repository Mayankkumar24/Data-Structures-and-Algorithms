class Solution {
public:
    int n;
    int Find_X(int &i,int &val,vector<int>&nums){
        int ans = 0, low = i,high = n-1;
        while(low <= high){
            int mid = (low + high)/2;
            if (nums[mid] < val){
                ans = max(ans,mid-i+1); low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return ans;
    }
    int Find_Y(int &i,int &val,vector<int>&nums){
        int ans = 0, low = i, high = n-1;
        while(low <= high){
            int mid = (low + high)/2;
            if (nums[mid] <= val){
                ans = max(ans,mid-i+1); low = mid+1;
            }else{
                high = mid-1;
            }
        }
        return ans;
    }
    long long countFairPairs(vector<int>& nums, int lower, int upper) {
        n = nums.size();
        long long ans = 0;

        sort(nums.begin(),nums.end());

        for (int i=0; i<n; i++){
            int j = i+1; int val1 = lower-nums[i], val2 = upper-nums[i];
            int x = Find_X(j,val1,nums);
            int y = Find_Y(j,val2,nums);
            ans += (y-x);
        }
        return ans;
    }
};
