class Solution {
public:
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        int n = colors.size();
        unordered_map<int,vector<int>>graph;
        vector<int>indegree(n,0);
        for (auto &x : edges){
            graph[x[0]].push_back(x[1]);
            indegree[x[1]]++;
        }
        vector<vector<int>>col(n,vector<int>(26,0));
        queue<int>q;
        for (int i=0; i<n; i++){
            if (indegree[i] == 0){
                q.push(i);
                col[i][colors[i]-'a'] = 1;
            }
        }
        int ans = 0,cnt = 0;
        while(!q.empty()){
            int node = q.front(); q.pop();
            ans = max(ans,col[node][colors[node]-'a']);
            cnt++;
            for (auto &next_node : graph[node]){

                for (int i=0; i<26; i++){
                    col[next_node][i] = max(col[next_node][i],col[node][i]+(colors[next_node]-'a' == i));
                }
                indegree[next_node]--;
                if (indegree[next_node] == 0){
                    q.push(next_node);
                }
            }
        }
        if (cnt != n) return -1;
        else return ans;
    }
};
