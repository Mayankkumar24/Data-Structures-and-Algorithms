class Solution {
public:

    void dfs(int r , int c , int n ,  vector <vector<int>> &matrix , int deltar[] , int deltac[]){

        matrix[r][c] = 1;
        for(int i=0 ; i<4 ; i++){
            int newr = r + deltar[i];
            int newc = c + deltac[i];

            if(newr >=0 && newr < 3*n && newc >=0 && newc < 3*n && matrix[newr][newc] == 0){
                dfs(newr,newc,n,matrix,deltar,deltac);
            }
        }

    }

    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        vector <vector<int>> matrix(3*n , vector <int>(3*n,0));

        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<n ; j++){

                if(grid[i][j] == '/'){
                    matrix[i*3][j*3+2] = 1;
                    matrix[i*3+1][j*3+1] = 1;
                    matrix[i*3+2][j*3] = 1;
                }else if(grid[i][j] == '\\'){
                    matrix[i*3][j*3] = 1;
                    matrix[i*3+1][j*3+1] = 1;
                    matrix[i*3+2][j*3+2] = 1;
                }else{
                    continue;
                }

            }
        }

        int deltar[] = {-1,0,1,0};
        int deltac[] = {0,1,0,-1};
        int ans = 0;

        for(int i=0 ; i<3*n ; i++){
            for(int j=0 ; j<3*n ; j++){
                if(matrix[i][j] == 0 ){
                    ans++;
                    dfs(i,j,n,matrix,deltar,deltac);
                }
            }
        }

        return ans;
    }
};
