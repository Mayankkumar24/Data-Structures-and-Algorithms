class Solution {
public:
    int n,m;
    void DFS(int i, int j,vector<vector<int>>&Ocean,vector<vector<int>>& heights){
        Ocean[i][j] = 1;
        vector<pair<int,int>>dir = {{0,-1},{1,0},{-1,0},{0,1}};

        for (int d = 0; d<4; d++){
            int x = dir[d].first + i;
            int y = dir[d].second + j;
            if ((x<0) || (y<0) || (x>=n) || (y>=m)) continue;
            if (Ocean[x][y]) continue;
            if (heights[x][y] < heights[i][j]) continue;
            DFS(x,y,Ocean,heights); 
        }
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {

        n = heights.size(), m = heights[0].size();
        vector<vector<int>>PacificOcean(n,vector<int>(m,0));
        vector<vector<int>>AtlanticOcean(n,vector<int>(m,0));

        for (int i=0; i<n; i++) DFS(i,0,PacificOcean,heights);
        for (int j=0; j<m; j++) DFS(0,j,PacificOcean,heights);

        for (int i=0; i<n; i++) DFS(i,m-1,AtlanticOcean,heights);
        for (int j=0; j<m; j++) DFS(n-1,j,AtlanticOcean,heights);

        vector<vector<int>>Answer;

        for (int i=0; i<n; i++){
            for (int j=0; j<m; j++){
                if ((PacificOcean[i][j]) && (AtlanticOcean[i][j])) {
                    Answer.push_back({i,j});
                }
            }
        }

        return Answer;
    }
};
