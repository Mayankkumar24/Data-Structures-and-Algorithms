//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
public:
    bool dfs(string &word,vector<vector<char>>&board,vector<vector<int>>&vis,int i, int j, int k){
        int n = board.size(),m = board[0].size();
        if (k == word.size()){
            return true;
        }
        if (i>=0 && i<n && j>=0 && j<m && !vis[i][j] && board[i][j]==word[k]){
            vis[i][j] = 1;
            if (dfs(word,board,vis,i+1,j,k+1)||
            dfs(word,board,vis,i,j+1,k+1) ||
            dfs(word,board,vis,i,j-1,k+1) ||
            dfs(word,board,vis,i-1,j,k+1) ||
            dfs(word,board,vis,i+1,j+1,k+1) ||
            dfs(word,board,vis,i+1,j-1,k+1) ||
            dfs(word,board,vis,i-1,j-1,k+1) ||
            dfs(word,board,vis,i-1,j+1,k+1)){
                return true;
            }
            vis[i][j] = false;
        }
        return false;
    }
    bool solve(string &word,vector<vector<char>>&board){
        int k = 0;
        int n = board.size(), m = board[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        //queue<pair<int,int>>q;
        for (int i=0; i<n; i++){
            bool f = false;
            for (int j=0; j<m; j++){
                if (board[i][j] == word[k]){
                    if (dfs(word,board,vis,i,j,k)){
                        return true;
                    }
                }
            }
        }
        return false;
        
    }
	vector<string> wordBoggle(vector<vector<char> >& board, vector<string>& dictionary) {
	    // Code here
	    vector<string>ans;
	    
	    for (auto &x : dictionary){
	        if (solve(x,board)){
	            ans.push_back(x);
	        }
	    }
	    return ans;
	}
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        cin >> N;
        vector<string> dictionary;
        for (int i = 0; i < N; ++i) {
            string s;
            cin >> s;
            dictionary.push_back(s);
        }
        
        int R, C;
        cin >> R >> C;
        vector<vector<char> > board(R);
        for (int i = 0; i < R; i++) {
            board[i].resize(C);
            for (int j = 0; j < C; j++) cin >> board[i][j];
        }
        Solution obj;
        vector<string> output = obj.wordBoggle(board, dictionary);
        if (output.size() == 0)
            cout << "-1";
        else {
            sort(output.begin(), output.end());
            for (int i = 0; i < output.size(); i++) cout << output[i] << " ";
        }
        cout << endl;
    }
}

// } Driver Code Ends
