class Solution {
public:
    typedef vector<int>p;
    int minimumTime(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        if ((grid[0][1] > 1) && (grid[1][0] > 1)) return -1;
        vector<vector<int>>vis(n,vector<int>(m,0));
        vis[0][0] = 1;
        priority_queue<p,vector<p>,greater<p>>pq;
        pq.push({grid[0][0],0,0});
        
        vector<int>row = {-1,1,0,0};
        vector<int>col = {0,0,1,-1};

        while(!pq.empty()){
            auto x = pq.top(); pq.pop();
            int curr_time = x[0], r = x[1], c = x[2];
            if ((r==n-1) && (c == m-1)) return curr_time;
            for (int i=0; i<4; i++){
                int nr = r + row[i];
                int nc = c + col[i];
                if (nr>=0 && nr<n && nc>=0 && nc<m && !vis[nr][nc]){
                    int wait = (grid[nr][nc] - curr_time)%2==0 ? 1:0;
                    pq.push({max(grid[nr][nc]+wait,curr_time+1),nr,nc});
                    vis[nr][nc] = 1;
                }
            }
        }
        return -1;
    }
};
