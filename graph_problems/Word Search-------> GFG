TIME COMP------------> O(N*M*(4*L));
SPACE COMP ----------> O(N*M);



//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    int n,m;
    bool solve(int row, int col,int i,string &word,vector<vector<char>>& mat){
        vector<vector<int>>vis(n,vector<int>(m,0));
        queue<pair<int,pair<int,int>>>q;
        vis[row][col] = 1;
        i++;
        q.push({row,{col,i}});
        vector<vector<int>>dir = {{1,0},{0,1},{0,-1},{-1,0}};
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second.first; 
            int i = q.front().second.second; q.pop();
            if (i >= word.size()) return true;
            for (int idx = 0; idx<=3; idx++){
                int nx = dir[idx][0] + x;
                int ny = dir[idx][1] + y;
                if (nx<n && nx>=0 && ny<m && ny>=0 && !vis[nx][ny] && mat[nx][ny] == word[i]){
                    i++;
                    q.push({nx,{ny,i}});
                    vis[nx][ny] = 1;
                }
            }
        }
        return false;
    }
    bool isWordExist(vector<vector<char>>& mat, string& word) {
        
        // Code here
        n = mat.size();
        m = mat[0].size();
        
        for (int i=0; i<n; i++){
            for (int j =0; j<m; j++){
                if (mat[i][j] == word[0]){
                    bool res = solve(i,j,0,word,mat);
                    if (res == true) return true;
                }
            }
        }
        return false;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> mat(n, vector<char>(m, '*'));
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                cin >> mat[i][j];
        string word;
        cin >> word;
        Solution obj;
        bool ans = obj.isWordExist(mat, word);
        if (ans)
            cout << "true\n";
        else
            cout << "false\n";

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
