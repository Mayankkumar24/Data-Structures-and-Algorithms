//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        queue<pair<pair<int,int>,int>>q;
        int fresh_cnt = 0;
        for (int i=0; i<n; i++){
            for (int j=0; j<m; j++){
                if (grid[i][j] == 2){
                    vis[i][j] = 2; q.push({{i,j},0});
                }else if (grid[i][j] == 1){
                    fresh_cnt++;
                }
            }
        }
        vector<int>row = {0,0,1,-1};
        vector<int>col = {-1,1,0,0};
        int cnt = 0, time = 0;
        while(!q.empty()){
            int x = q.front().first.first;
            int y = q.front().first.second;
            int ct = q.front().second; q.pop();
            time = max(time,ct);
            for (int i=0; i<4; i++){
                int nx = row[i] + x, ny = col[i] + y;
                if (nx>=0 && nx<n && ny>=0 && ny<m && vis[nx][ny] != 2 && grid[nx][ny] == 1){
                    q.push({{nx,ny},ct+1}); vis[nx][ny] = 2; cnt++;
                }
            }
        }
        if (cnt != fresh_cnt) return -1;
        else return time;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.orangesRotting(grid);
		cout << ans << "\n";
	}
	return 0;
}
// } Driver Code Ends
