class Solution {
public:
    typedef pair<double,int>p;
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        
        unordered_map<int,vector<pair<int,double>>>graph;
        int N = edges.size();
        for (int i=0; i<N; i++){
            int fromt = edges[i][0];
            int to = edges[i][1];
            graph[fromt].push_back({to,succProb[i]});
            graph[to].push_back({fromt,succProb[i]});
        }
        //priority_queue<p,vector<p>,greater<p>>pq;
        priority_queue<p>pq;
        pq.push({1.0, start_node});
        vector<double>prob(n,0.0);
        prob[start_node] = 1.0;

        while(!pq.empty()){
            double p = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            if (node == end_node){
                return p;
            }
            for (auto &it : graph[node]){
                int next_node = it.first;
                double e_p = it.second;
                double c_p = e_p*p;
                if (c_p > prob[next_node]){
                    pq.push({c_p,next_node});
                    prob[next_node] = c_p;
                }
            }
        }
        return 0.0;
    }
};
