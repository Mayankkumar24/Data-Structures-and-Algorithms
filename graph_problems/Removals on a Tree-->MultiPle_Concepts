class Solution {
public:
    void DFS(int node, int parent,vector<int>&subTreeXor,vector<int>&inTime,vector<int>&outTime,int &timer,vector<int>&nums,unordered_map<int,vector<int>>&adj){
        subTreeXor[node] = nums[node];
        inTime[node] = timer; timer++;
        for (int &ngbr : adj[node]){
            if (ngbr != parent){
                DFS(ngbr,node,subTreeXor,inTime,outTime,timer,nums,adj);
                subTreeXor[node] ^= subTreeXor[ngbr];
            }
        }
        outTime[node] = timer; timer++;
    }
    bool isAncesstor(int u, int v,vector<int>&inTime,vector<int>&outTime){
        return inTime[v]>=inTime[u] && outTime[v] <= outTime[u];
    }
    int getScore(int a, int b, int c){
        int maxi = max({a,b,c});
        int mini = min({a,b,c});
        return maxi  - mini;
    }
    int minimumScore(vector<int>& nums, vector<vector<int>>& edges) {
        int n = nums.size();
        unordered_map<int,vector<int>>adj;
        for (auto edge : edges){
            int u = edge[0];
            int v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<int>subTreeXor(n,0),inTime(n,0),outTime(n,0);
        int timer = 0;
        DFS(0,-1,subTreeXor,inTime,outTime,timer,nums,adj);
        int res = INT_MAX;
        for (int u=1; u < n; u++){
            for (int v=u+1; v<n; v++){
                int xor1, xor2, xor3;
                if (isAncesstor(u,v,inTime,outTime)){
                    xor1 = subTreeXor[v];
                    xor2 = subTreeXor[u] ^ subTreeXor[v];
                    xor3 = subTreeXor[0] ^ xor1 ^ xor2;
                }else if (isAncesstor(v,u,inTime,outTime)){
                    xor1 = subTreeXor[u];
                    xor2 = subTreeXor[v] ^ subTreeXor[u];
                    xor3 = subTreeXor[0] ^ xor1 ^ xor2;
                }else{
                    xor1 = subTreeXor[u];
                    xor2 = subTreeXor[v];
                    xor3 = subTreeXor[0] ^ xor1 ^ xor2;
                }
                res = min(res,getScore(xor1,xor2,xor3));
            }
        }
        return res;
    }
};
