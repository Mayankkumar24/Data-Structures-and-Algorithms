---------------BRUTE FORCE APPROACH-------------------------
TIME COMP----> O(N*N);
SPACE COMP---> O(1);


class Solution {
public:
    int countHillValley(vector<int>& nums) {
        int n = nums.size();
        int ans = 0, hills = -1, vallies = -1;
        for (int i=1; i<n-1; i++){
            if (i <= hills || i <= vallies) continue;
            else if (nums[i] > nums[i-1]){
                int j=i+1;
                while(j<n && nums[j] == nums[i]){
                    hills = j; j++;
                }
                if (j<n && nums[j] < nums[i]){
                    ans++;
                }
            }else if (nums[i] < nums[i-1]){
                int j = i+1;
                while(j<n && nums[j] == nums[i]){
                    vallies = j; j++;
                }
                if (j<n && nums[j] > nums[i]){
                    ans++;
                }
            }
        }
        return ans;
    }
};

-----------------OPTIMAL APPROACH-----------------------
TIME COMP----> O(N);
SPACE COMP---> O(N);

class Solution {
public:
    int countHillValley(vector<int>& nums) {
        int n = nums.size();
        vector<int>Renums;
        Renums.push_back(nums[0]);
        for (int i=1; i<n; i++){
            if (nums[i] != nums[i-1]) Renums.push_back(nums[i]);
        }
        int ans = 0;
        for (int i=1; i<Renums.size()-1; i++){
            if (Renums[i]>Renums[i-1] && Renums[i] > Renums[i+1]) ans++;
            else if (Renums[i] < Renums[i-1] && Renums[i] < Renums[i+1]) ans++;
        }
        return ans;
    }
};


-----------------MOST OPTIMAL APPROACH-----------------
TIME COMP-----> O(N);
SPACE COMP----> O(1);


class Solution {
public:
    int countHillValley(vector<int>& nums) {
        int n = nums.size();
        int left = 0, count = 0;
        for (int i=1; i<n-1; i++){
            if (nums[i] != nums[i+1]){
                if (nums[i]>nums[left] && nums[i]>nums[i+1]) count++;
                else if (nums[i]<nums[left] && nums[i]<nums[i+1]) count++;
                left = i;
            }
        }
        return count;
    }
};
