--------------------APPROACH 01---------------------
TIME COMP---------> O(N);
SPACE COMP--------> O(N);

class Solution {
  public:
    int maxLength(string& s) {
        // code here
        int n = s.size();
        int res = 0;
        stack<int>st;
        st.push(-1);
        for (int i=0; i<n; i++){
            char ch = s[i];
            if (ch == '(') st.push(i);
            else{
                if (!st.empty()) st.pop();
                if (!st.empty()){
                    res = max(res,i-st.top());
                }else{
                    st.push(i);
                }
            }
        }
        return res;
    }
};


----------------MOST OPTIMAL APPROACH----------------------
TIME COMP-----> O(2*N);
SPACE COMP----> O(1);


class Solution {
  public:
    int maxLength(string& s) {
        // code here
        int n = s.size();
        int res = 0;
        int open = 0, close = 0;
        
        
        for (int i=0; i<n; i++){
            char ch = s[i];
            if (ch ==  '(') open++;
            else close++;
            if (open == close){
                res = max(res,2*open);
            }
            else if (close > open){
                open = 0; close = 0;
            }
        }
        open = 0;
        close = 0;
        
        for (int i=n-1; i>=0; i--){
            char ch = s[i];
            if (ch ==  '(') open++;
            else close++;
            if (open == close){
                res = max(res,2*close);
            }
            else if (open > close){
                open = 0; close = 0;
            }
        }
        return res;
    }
};
