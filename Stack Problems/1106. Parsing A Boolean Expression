class Solution {
public:
    char solve(vector<char>&val,char &op){
        if (op == '!'){
            return val[0] == 't' ? 'f' : 't';
        }
        else if (op == '&'){
            for (char &ch : val){
                if (ch == 'f') return 'f';
            }
            return 't';
        }else{
            for (char &ch : val){
                if (ch == 't') return 't';
            }
            return 'f';
        }
    }
    bool parseBoolExpr(string expression) {
        
        stack<char>st;
        int n = expression.size();

        for (int i=0; i<n; i++){
            if (expression[i] == ',') continue;
            else if (expression[i] == ')'){
                vector<char>val;
                while(st.top() != '('){
                    val.push_back(st.top()); st.pop();
                }
                st.pop();
                char op = st.top();
                st.pop();
                st.push(solve(val,op));
            }else{
                st.push(expression[i]);
            }
        }
        return st.top() == 't' ? true : false;
    }
};
