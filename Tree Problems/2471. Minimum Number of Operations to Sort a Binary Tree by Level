/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int Get_Swap(vector<int>&level,vector<int>&temp){
        int n = temp.size();
        unordered_map<int,int>mp;
        for (int i=0; i<n; i++) mp[level[i]] = i;
        int Swap = 0;
        for (int i=0; i<n; i++){
            if (level[i] == temp[i]) continue;
            else{
                int ind = mp[temp[i]];
                int t = level[i];
                mp[t] = ind;
                mp[level[ind]] = i;
                swap(level[i],level[ind]); Swap++;
            }
        }
        return Swap;
    }
    int minimumOperations(TreeNode* root) {
        int ans = 0;
        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty()){
            int size = q.size();
            vector<int>level;
            vector<int>temp;
            while(size--){
                TreeNode* node = q.front();
                q.pop();
                level.push_back(node->val);
                temp.push_back(node->val);
                if (node->left){
                    q.push(node->left);
                }
                if (node->right){
                    q.push(node->right);
                }
            }
            sort(temp.begin(),temp.end());
            if (temp.size() != 0){
                ans += (Get_Swap(level,temp));
            }
        }
        return ans;
    }
};
