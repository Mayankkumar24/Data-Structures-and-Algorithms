/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int level_order(TreeNode* root){
        if (!root) return 0;
        queue<TreeNode*> q;
        q.push(root); int cnt = 0,level = 0;
        vector<int>val;
        while(!q.empty()){
            int size = q.size(); cnt = 0;
            while(size--){
                TreeNode* r = q.front(); q.pop();
                cnt++;
                if (r->left){
                    q.push(r->left);
                }
                if (r->right){
                    q.push(r->right);
                }
            }
            if (cnt != pow(2,level)){
                return 0;
            }
            val.push_back(cnt); level++;
        }
        int sum = 0;
        for (int num : val) sum += num;
        return sum;
    }
    void func(TreeNode* root, vector<int>&ans){
        if (!root) return;
        int val = level_order(root);
        if (val != 0){
            ans.push_back(val);
        }
        func(root->left,ans);
        func(root->right,ans);
    }
    int kthLargestPerfectSubtree(TreeNode* root, int k) {
        if (!root) return 0;
        vector<int>ans;
        func(root,ans);
        sort(ans.rbegin(),ans.rend());
        if (k > ans.size()) return -1;
        return ans[k-1];
    }
};
