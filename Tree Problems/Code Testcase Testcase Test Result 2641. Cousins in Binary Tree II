/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {

        unordered_map<TreeNode*,int>mpp;
        unordered_map<int,int>sum; int depth = 0;
        queue<pair<TreeNode*,TreeNode*>>q;
        q.push({root,nullptr});

        while(!q.empty()){
            int size = q.size();
            while(size--){
                TreeNode* node = q.front().first;
                TreeNode* parent = q.front().second; q.pop();

                if (parent == nullptr){
                    node->val = 0;
                }else{
                    node->val = sum[depth] - mpp[parent];
                }
                if (node->left){
                    sum[depth+1] += node->left->val;
                    mpp[node] += node->left->val;
                    q.push({node->left,node});
                }
                if (node->right){
                    sum[depth+1] += node->right->val;
                    mpp[node] += node->right->val;
                    q.push({node->right,node});
                }
            }
            depth++;
        }
        return root;
        
    }
};
