class Solution {
public:
    string fractionAddition(string exp) {
        int nume = 0, deno = 1, i = 0, n = exp.size();
        while(i<n){
            int currNume = 0, currDeno = 0;
            bool isNeg = (exp[i] == '-');
            if (exp[i] == '+' || exp[i] == '-'){
                i++;
            }
            while(i<n && isdigit(exp[i])){
                int val = exp[i] - '0';
                currNume = (currNume * 10) + val;
                i++;
            }
            i++;
            if (isNeg){
                currNume *= -1;
            }
            while(i<n && isdigit(exp[i])){
                int val = exp[i] - '0';
                currDeno = (currDeno * 10) + val;
                i++;
            }
            nume = (nume * currDeno) + (currNume * deno);
            deno = (deno * currDeno);
        }
        int GCD = abs(__gcd(nume,deno));
        nume /= GCD;
        deno /= GCD;
        return to_string(nume) + "/" + to_string(deno);
    }
};
