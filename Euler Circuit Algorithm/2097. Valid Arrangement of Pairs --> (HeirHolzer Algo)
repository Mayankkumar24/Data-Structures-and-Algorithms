class Solution {
public:
    vector<vector<int>> validArrangement(vector<vector<int>>& pairs) {
        unordered_map<int,vector<int>>adj;
        unordered_map<int,int>inDegree,outDegree;

        for (auto &x : pairs){
            int u = x[0], v = x[1];
            adj[u].push_back(v); inDegree[v]++; outDegree[u]++;
        }
        int StartNode = pairs[0][0];

        for (auto &it : adj){
            int node = it.first;
            if (outDegree[node] - inDegree[node] == 1){
                StartNode = node; break;
            }
        }
        vector<int>EulerPath;
        stack<int>st;
        st.push(StartNode);
        while(!st.empty()){
            int curr = st.top();
            if (!adj[curr].empty()){
                int ngbr = adj[curr].back();
                adj[curr].pop_back();
                st.push(ngbr);
            }else{
                EulerPath.push_back(curr); st.pop();
            }
        }
        vector<vector<int>>ans;
        reverse(EulerPath.begin(),EulerPath.end());
        for (int i=0; i<EulerPath.size()-1; i++){
            ans.push_back({EulerPath[i],EulerPath[i+1]});
        }
        return ans;
    }
};
