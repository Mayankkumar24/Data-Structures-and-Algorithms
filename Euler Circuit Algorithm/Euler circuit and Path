An Eulerian Path is a path in graph that visits every edge exactly once. 
An Eulerian Circuit is an Eulerian Path which starts and ends on the same vertex. 
Given an undirected connected graph with V nodes, and E edges, with adjacency list adj, 
return 2 if the graph contains an eulerian circuit, else if the graph contains an eulerian path, return 1, otherwise, return 0.


//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    void DFS(vector<int>adj[],int u,vector<int>&vis){
        vis[u] = true;
        for (auto it = adj[u].begin(); it != adj[u].end(); it++){
            int neigh = *it;
            if (vis[neigh] != true){
                DFS(adj,neigh,vis);
            }
        }
    }
    bool isConnected(int &V,vector<int>adj[]){
        int NonZeroDegreeVertex = -1;
        for (int i=0; i<V; i++){
            if (adj[i].size() != 0){
                NonZeroDegreeVertex = i; break;
            }
        }
        vector<int>vis(V,false);
        DFS(adj,NonZeroDegreeVertex,vis);
        
        for (int i=0; i<V; i++){
            if (vis[i] == false && adj[i].size() > 0){
                return false;
            }
        }
        return true;
    }
	int isEulerCircuit(int V, vector<int>adj[]){
	    // Code here
	    if (isConnected(V,adj) == false){
	        return 0;
	    }
	    int OddDegreeCnt = 0;
	    for (int i=0; i<V; i++){
	        if (adj[i].size()%2 != 0){
	            OddDegreeCnt++;
	        }
	    }
	    if (OddDegreeCnt > 2) return 0;
	    else if (OddDegreeCnt == 2) return 1;
	    return 2;
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		int ans = obj.isEulerCircuit(V, adj);
		cout << ans <<"\n";	
cout << "~" << "\n";
}
	return 0;
}
// } Driver Code Ends
