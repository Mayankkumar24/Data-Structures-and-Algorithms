struct Node{
    Node* links[26]; bool end = false;
    bool isPresent(char ch){
        return links[ch-'a'] != NULL;
    }
    Node* get(char ch){
        return links[ch-'a'];
    }
    void put(char ch, Node* node){
        links[ch-'a'] = node;
    }
    void setEnd(){
        end = true;
    }
    bool isEnd(){
        return end;
    }
};

class Trie{
    public:
    Node* root;
    Trie(){
        root = new Node();
    }
    void insert(string &word){
        Node* node = root;
        for (int i=0; i<word.size(); i++){
            if (!node->isPresent(word[i])){
                node->put(word[i],new Node());
            }
            node = node->get(word[i]);
        }
        node->setEnd();
    }
};

class Solution {
    Trie trie;
    int dp[10005];
private:
    int isCancat(int i, string &s){
        if (i >= s.size()) return 0;
        if (dp[i] != -1) return dp[i];
        int ans = -1e9;
        Node* node = trie.root;
        if (!node->isPresent(s[i])) return -1e9;
        for (int k=i; k<s.size(); k++){
            if (!node->isPresent(s[k])){
                return dp[i] = ans;
            }
            node = node->get(s[k]);
            if (node->isEnd()){
                ans = max(ans,1+isCancat(k+1,s));
            }
        }
        return dp[i] = ans;
    }
public:
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {

        for (auto &word : words){
            trie.insert(word);
        }
        vector<string>ans;

        for (auto &word : words){
            memset(dp,-1,sizeof(dp));
            if (isCancat(0,word) > 1) ans.push_back(word);
        }
        return ans;
        
    }
};
