------------------------BRUTE FORCE APPROACH------------------------
TIME COMP---------------> O(N*(N+N);
SPACE COMP--------------> O(1);

class Solution {
public:
    int longestMonotonicSubarray(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for (int i=0; i<n; i++){
            int longest_inc = 1;
            int j = i+1;
            while(j<n && nums[j] > nums[j-1]){
                longest_inc++; j++;
            }
            j = i+1;
            int longest_dec = 1;
            while(j<n && nums[j] < nums[j-1]){
                longest_dec++; j++;
            }
            ans = max(ans,max({longest_inc,longest_dec}));
        }
        return ans;
    }
};


--------------------APPROACH 02-----------------------
TIME COMP-----------> O(N);
SPACE COMP-----------> O(1);


class Solution {
public:
    int longestMonotonicSubarray(vector<int>& nums) {
        int n = nums.size();
        int ans = 1;
        int longest_inc = 1, longest_dec = 1;
        for (int i=0; i<n-1; i++){
            if (nums[i] > nums[i+1]){
                longest_dec++; longest_inc = 1;
            }else if (nums[i] < nums[i+1]){
                longest_dec = 1; longest_inc++;
            }else{
                longest_dec = 1; longest_inc = 1;
            }
            ans = max(ans,max(longest_inc,longest_dec));
        }
        return ans;
    }
};
