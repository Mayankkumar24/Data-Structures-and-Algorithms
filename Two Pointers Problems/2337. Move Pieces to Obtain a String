class Solution {
public:
    bool solve(string &start, string &target,unordered_map<string,bool>&memo){
        int n = start.size();
        if (start == target){
            return true;
        }
        if (memo.count(start)){
            return memo[start];
        }
        for (int i=0; i<n; i++){
            if (start[i] == 'L' && i > 0 && start[i-1] == '_'){
                swap(start[i],start[i-1]);
                if (solve(start,target,memo) == true){
                    return true;
                }
                swap(start[i],start[i-1]);
            }else if (start[i] == 'R' && i<n-1 && start[i+1] == '_'){
                swap(start[i],start[i+1]);
                if (solve(start,target,memo) == true){
                    return true;
                }
                swap(start[i],start[i+1]);
            }
        }
        return memo[start] = false;
    }
    bool canChange(string start, string target) {
        unordered_map<string,bool>memo;
        return solve(start,target,memo);
    }
};



--------OPTIMAL SOLUTION---------

class Solution {
public:
    bool canChange(string start, string target) {
        int n = start.size();
        int i = 0, j = 0;

        while(i<n || j<n){
            while(i<n && start[i] == '_'){
                i++;
            }
            while(j<n && target[j] == '_'){
                j++;
            }
            if (i ==n || j == n){
                return (i == n && j == n);
            }
            if (start[i] != target[j]){
                return false;
            }
            if(start[i] == 'L' && i < j) return false;
            else if (start[i] == 'R' && i > j) return false;
            i++; j++;
        }
        return (i==n && j == n);
    }
};
