-------------------------APPROACH 01------------------------------
TIME COMP----> O(N*(LOG(N)) + O(K*LOG(K)) + O(K);
SPACE COMP---> O(2*N);

class Solution {
public:
    static bool comp(pair<int,int>&a,pair<int,int>&b){
        return a.second > b.second;
    }
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<pair<int,int>>vec;
        for (int i=0; i<n; i++){
            vec.push_back({i,nums[i]});
        }
        sort(vec.begin(),vec.end(),comp);
        vector<int>ans;
        sort(vec.begin(),vec.begin()+k);
        for (int i=0; i<k; i++) ans.push_back(vec[i].second);
        return ans;

    }
};


-------------------------APPROACH 02-----------------------------

TIME COMP------> O(N*(LOG(K)) + O(K*LOG(K)) + O(K);
SPACE COMP-----> O(2*K);

class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        int n = nums.size();
        for (int i=0; i<n; i++){
            pq.push({nums[i],i});
            if (pq.size() > k) pq.pop();
        }
        vector<int>ans;
        while(!pq.empty()){
            ans.push_back(pq.top().second); pq.pop();
        }
        sort(ans.begin(),ans.end());
        for (int i=0; i<ans.size(); i++){
            ans[i] = nums[ans[i]];
        }
        return ans;
    }
};
