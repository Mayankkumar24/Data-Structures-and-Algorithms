class Solution {
public:
    typedef pair<double,pair<int,int>>p;
    long long minDamage(int power, vector<int>& damage, vector<int>& health) {
        vector<int>t;
        int n = damage.size();

        for (int i=0; i<n; i++){
            t.push_back((health[i]+power-1)/power);
        }
        vector<double>r;

        for (int i=0; i<n; i++){
            r.push_back(static_cast<double>(t[i])/damage[i]);
        }
        long long sum = accumulate(damage.begin(),damage.end(),0);

        priority_queue<p,vector<p>,greater<p>>pq;

        for (int i=0;i<n; i++){
            pq.push({r[i],{damage[i],t[i]}});
        }
        long long ans = 0;
        while(!pq.empty()){
            auto x = pq.top(); pq.pop();
            int d1 = x.second.first;
            int t1 = x.second.second;

            ans += (sum*t1);
            sum -= d1;
        }
        return ans;
    }
};
