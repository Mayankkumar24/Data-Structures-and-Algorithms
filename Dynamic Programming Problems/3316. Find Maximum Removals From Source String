class Solution {
public:
    int n,m;
    int solve(int i, int j,string &s, string &p, unordered_set<int>&st,vector<vector<int>>&dp){
        if (j >= m) return 0;
        if (i >= n) return 1e9;
        if (dp[i][j] != -1) return dp[i][j];
        int ans = 1e9;
        int not_take = solve(i+1,j,s,p,st,dp);
        ans = min(ans,not_take);

        if (s[i] == p[j]){
            int to_add = 0;
            if (st.find(i) != st.end()){
                to_add = 1;
            }
            int take = to_add + solve(i+1,j+1,s,p,st,dp);
            ans = min(ans,take);
        }
        return dp[i][j] = ans;
    }
    int maxRemovals(string source, string pattern, vector<int>& targetIndices) {
        n = source.size();
        m = pattern.size();
        unordered_set<int>st;
        for (auto &x : targetIndices) st.insert(x);
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        int min_char_need_make_pattern = solve(0,0,source,pattern,st,dp);
        int ans = targetIndices.size()-min_char_need_make_pattern;
        return ans;
    }
};
