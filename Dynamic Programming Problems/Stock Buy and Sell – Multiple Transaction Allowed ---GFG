//{ Driver Code Starts
// Initial template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    int Trade(int i, int buy, vector<int>&prices,vector<vector<int>>&dp){
        int n = prices.size();
       
        if (i >= n) return 0;
        if (dp[i][buy] != -1) return dp[i][buy];
        int profit = 0;
        profit = max(profit,Trade(i+1,buy,prices,dp));
        if (buy == 1){
            profit = max(profit,prices[i]+Trade(i+1,0,prices,dp));
            profit = max(profit,Trade(i+1,1,prices,dp)-prices[i]);
        }else{
            profit = max(profit,Trade(i+1,1,prices,dp)-prices[i]);
        }
        return dp[i][buy] = profit;
    }
    int maximumProfit(vector<int> &prices) {
        // code here
        int n = prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,-1));
        return Trade(0,0,prices,dp);
    }
};


//{ Driver Code Starts.
int main() {
    int t;

    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        int n = arr.size();
        Solution ob;
        int res = ob.maximumProfit(arr);
        cout << res;

        cout << "\n";
    }
    return 0;
}
// } Driver Code Ends
