class Solution {
public:
    int n,m;
    int dp[301][301];
    int solve(int i, int j,vector<vector<char>>& matrix){
        if (i >= n || j >= m || matrix[i][j] == '0') return 0;
        if (dp[i][j] != -1) return dp[i][j];
        int right = solve(i,j+1,matrix);
        int down  = solve(i+1,j,matrix);
        int diogonal = solve(i+1,j+1,matrix);

        return dp[i][j] = 1 + min({right,down,diogonal});
    }
    int maximalSquare(vector<vector<char>>& matrix) {
        n = matrix.size();
        m = matrix[0].size();
        memset(dp,-1,sizeof(dp));
        int max_area = 0;

        for (int i=0; i<n; i++){
            for (int j=0; j<m; j++){
                if (matrix[i][j] == '1'){
                    int curr_area = solve(i,j,matrix);
                    max_area = max(max_area,curr_area*curr_area);
                }
            }
        }
        return max_area;
    }
};
