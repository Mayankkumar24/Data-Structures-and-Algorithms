class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n  = nums.size();
        sort(nums.begin(),nums.end());
        vector<int>dp(n,1);
        vector<int>last_index(n,-1);
        int last_ = 0;
        int maxl = 1;

        for (int i=1; i<n; i++){
            for (int j=0; j<i; j++){
                if (nums[i]%nums[j] == 0){
                    if (dp[i] < dp[j]+1){
                        dp[i] = dp[j]+1;
                        last_index[i] = j;
                    }
                    if (maxl < dp[i]){
                        last_ = i;
                        maxl = dp[i];
                    }
                }
            }
        }
        vector<int>ans;
        while(last_ != -1){
            ans.push_back(nums[last_]);
            last_= last_index[last_];
        }
        return ans;
    }
};
