/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,vector<TreeNode*>>mp;
    vector<TreeNode*> solve(int n){
        if (n % 2 == 0){
            return {};
        }
        if (n == 1){
            TreeNode* root = new TreeNode(0);
            return {root};
        }
        if (mp.find(n) != mp.end()){
            return mp[n];
        }
        vector<TreeNode*>res;
        for (int i=1; i<n; i++){
            vector<TreeNode*> left_full_trees = solve(i);
            vector<TreeNode*> right_full_trees = solve(n-i-1);

            for (auto &l : left_full_trees){
                for (auto &r : right_full_trees){

                    TreeNode* root = new TreeNode(0);
                    root->left = l;
                    root->right = r;
                    res.push_back(root);
                }
            }
        }
        return mp[n] = res;
    }
    vector<TreeNode*> allPossibleFBT(int n) {
        return solve(n);
    }
};
