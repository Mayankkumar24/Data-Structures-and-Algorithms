class Solution {
public:
    int dp[501][501][3];
    int solve(int i, int j,int have, vector<vector<int>>&coins){
        int n = coins.size(), m = coins[0].size();
        if ((i == n-1) && (j == m-1)){
            if (coins[i][j] >= 0) return coins[i][j];
            else {
                if (have > 0) return 0;
                else return coins[i][j];
            }
        }
        if (i >= n || j >= m) return -1e9;
        if (dp[i][j][have] != -1) return dp[i][j][have];
        int right = -1e9;
        int down = -1e9;
        if (coins[i][j] >= 0){
            right = coins[i][j]  + solve(i,j+1,have,coins);
            down  = coins[i][j] + solve(i+1,j,have,coins);
        }else{
            if (have > 0) right = solve(i,j+1,have-1,coins);
            if (have > 0) down  = solve(i+1,j,have-1,coins);
            right = max(right,coins[i][j] + solve(i,j+1,have,coins));
            down  = max(down,coins[i][j]  + solve(i+1,j,have,coins));
        }
        return dp[i][j][have] = max(right,down);
    }
    int maximumAmount(vector<vector<int>>& coins) {
        memset(dp,-1,sizeof(dp));
        return solve(0,0,2,coins);
    }
};
