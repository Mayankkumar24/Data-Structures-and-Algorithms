class Solution {
public:
    int n;
    int solve(int i, int curr_xor, int &max_xor, vector<int>&nums,vector<vector<int>>&dp){
        if (i >= n){
            if (curr_xor == max_xor) return 1;
            else return 0;
        }
        if (dp[i][curr_xor] != -1) return dp[i][curr_xor];
        int take = solve(i+1,curr_xor | nums[i], max_xor,nums,dp);
        int skip = solve(i+1,curr_xor,max_xor,nums,dp);
        return dp[i][curr_xor] = take + skip;
    }
    int countMaxOrSubsets(vector<int>& nums) {
        
        int max_xor = nums[0];
        n = nums.size();

        for (int i=1; i<n; i++){
            max_xor |= nums[i];
        }

        int curr_xor = 0;
        vector<vector<int>>dp(n+1,vector<int>(max_xor+1,-1));
        return solve(0,curr_xor,max_xor,nums,dp);
        
    }
};
