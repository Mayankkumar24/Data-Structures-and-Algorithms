class Solution {
  public:
    
    int getCount(int n) {
        // code here
        vector<vector<int>> board = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9},
            {-1, 0, -1}
        };
        vector<vector<vector<int>>> dp(4, vector<vector<int>>(3, vector<int>(n + 1, -1)));
        function<int(int, int, int)> helper = [&](int i, int j, int cnt) -> int {
            if (i < 0 || j < 0 || i >= 4 || j >= 3 || board[i][j] == -1)
                return 0;

            if (cnt == 1)
                return 1;

            if (dp[i][j][cnt] != -1)
                return dp[i][j][cnt];

            int res = 0;
            res += helper(i, j, cnt - 1);
            res += helper(i - 1, j, cnt - 1);
            res += helper(i + 1, j, cnt - 1);
            res += helper(i, j - 1, cnt - 1);
            res += helper(i, j + 1, cnt - 1);

            return dp[i][j][cnt] = res;
        };
        int total = 0;
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] != -1) {
                    total += helper(i, j, n);
                }
            }
        }
        return total;
    }
};
