-------------BRUTE FORCE APPROACH--------------------
TIME COMP----> O(2^N);
A.SPACE COMP---> O(N);

class Solution {
public:
    int solve(int i, int j,int k,string &s){
        if (i >= j) return (i == j ? 1 : 0);
        int diff = abs(s[i]-s[j]);
        int cost = min(diff,26-diff);
        int res = 0;
        if (cost <= k) res = max(res,2+solve(i+1,j-1,k-cost,s));
        res = max({res,solve(i+1,j,k,s),solve(i,j-1,k,s)});
        return res;
    }
    int longestPalindromicSubsequence(string s, int k) {
        int n = s.size();
        int i = 0, j = n-1;
        return solve(0,j,k,s);
    }
};


-----------------OPTIMAL APPROACH---------------------------
TIME COMP----> O(N^2 * K);
SPACE COMP---> O(N^ * K) + O(N) A.SPACE 

class Solution {
public:
    int solve(int i, int j,int k,string &s,vector<vector<vector<int>>>&dp){
        if (i >= j) return (i == j ? 1 : 0);
        if (dp[i][j][k] != -1) return dp[i][j][k];
        int diff = abs(s[i]-s[j]);
        int cost = min(diff,26-diff);
        int res = 0;
        if (cost <= k) res = max(res,2+solve(i+1,j-1,k-cost,s,dp));
        res = max({res,solve(i+1,j,k,s,dp),solve(i,j-1,k,s,dp)});
        return dp[i][j][k] = res;
    }
    int longestPalindromicSubsequence(string s, int k) {
        int n = s.size();
        int i = 0, j = n-1;
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(n+1,vector<int>(k+1,-1)));
        return solve(0,j,k,s,dp);
    }
};
