class Solution {
public:
    typedef long long ll;
    //long long dp[100005][2];
    ll solve(int i, int no,vector<int>&A,vector<int>&B,vector<vector<ll>>&dp){
        if (i >= A.size()) return (ll) 0;
        if (dp[i][no] != -1) return dp[i][no];
        ll take = 0;
        if (no == 0){
            take = max(take,(ll) A[i] + solve(i+1,0,A,B,dp));
        }else{
            take = max(take,(ll) B[i] + solve(i+1,1,A,B,dp));
        }
        ll skip = 0;
        if (no == 0){
            skip = max(skip,solve(i+1,1,A,B,dp));
        }else{
            skip = max(skip,solve(i+1,0,A,B,dp));
        }
        return dp[i][no] = max(skip,take);
    }
    long long maxEnergyBoost(vector<int>& energyDrinkA, vector<int>& energyDrinkB) {
        
        ll res = 0;
        ll n  = energyDrinkA.size();
        vector<vector<ll>>dp(n+1,vector<ll>(2,-1));
        res = max(res,solve(0,0,energyDrinkA,energyDrinkB,dp));
        res = max(res,solve(0,1,energyDrinkA,energyDrinkB,dp));
        return res; 

    }
};
