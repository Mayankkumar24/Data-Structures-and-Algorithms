--------------------APPROACH 01---------------------------
TIME COMP----> O(N*N);
SPACE COMP---> O(N*N) + O(N) A.SPACE

class Solution {
public:
    int Solve(int i,int size,int sum,string &s,vector<vector<int>>&dp){
        if (i < 0) return 0;
        if (dp[i][size] != -1) return dp[i][size];
        int skip = Solve(i-1,size,sum,s,dp);
        int take = 0;
        if ((sum-(s[i]-'0') * pow(2,size)) >= 0){
            take = 1 + Solve(i-1,size+1,sum-(s[i]-'0') * pow(2,size),s,dp);
        }
        return dp[i][size] = max(take,skip);
    }
    int longestSubsequence(string s, int k) {
        int n = s.size();
        vector<vector<int>>dp(n,vector<int>(n,-1));
        return Solve(n-1,0,k,s,dp);
    }
};

-----------------APPROACH 02-----------------------
TIME COMP---> O(N);
SPACE COMP--> O(1);

class Solution {
public:
    int longestSubsequence(string s, int k) {
        int length = 0;
        int PowerValue = 1;
        int n = s.length();
        for (int i=n-1; i>=0; i--){
            if (s[i] == '0') length++;
            else if (PowerValue <= k){
                k = k-PowerValue;
                length++;
            }
            if (PowerValue <= k){
                PowerValue *= 2;
            }
        }
        return length;
    }
};
