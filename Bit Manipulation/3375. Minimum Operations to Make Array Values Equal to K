---------------APPROACH 01-------------------
TIME COMP-----> O(N*LOG(N));
SPACE COMP----> O(1);

class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int cnt = 0;
        if (nums[0] < k) return -1;
        for (int i=0; i<n; i++){
            if (nums[i] > k) {
                cnt++;
                while(i+1<n && nums[i] == nums[i+1]) i++;
            }
        }
        return cnt;
    }
};

------------APPROACH 02---------------
TIME COMP-----> O(N);
SPACE COMP----> O(N);

class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int,int>mp;
        for (int &x : nums){
            if (x < k) return -1;
            if (x > k) mp[x]++;
        }
        return mp.size();
    }
};


-----------------------APPROCH 03------------------------
TIME COMP-----> O(N);
SPACE COMP----> O(1);

class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        int mini = *min_element(nums.begin(),nums.end());
        if (mini < k) return -1;
        bitset<100001>st;
        for (int i : nums){
            if (i > k) st.set(i);
        }
        return st.count();
    }
};
